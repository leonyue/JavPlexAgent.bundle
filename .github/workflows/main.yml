name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:

  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache linuxbrew
        id: cache-linuxbrew
        uses: actions/cache@v2
        with:
          path: /home/linuxbrew
          key: ${{ runner.os }}-linuxbrew
      - name: Cache pyenv
        id: cache-pyenv
        uses: actions/cache@v2
        with:
          path: /Users/runner/.pyenv/
          key: ${{ runner.os }}-pyenv
      - name: Install environment dependencies
        run: |
          sudo apt-get update
          sudo apt-get install python-dev libjpeg-dev zlib1g-dev # for pillow
      - name: Install Python 2.7.12
        env:
          PYTHON_CONFIGURE_OPTS: --enable-unicode=ucs2
        run: |
          brew install openssl readline pyenv
          CFLAGS="-I$(brew --prefix openssl)/include" \
          LDFLAGS="-L$(brew --prefix openssl)/lib" \
          pyenv install 2.7.12
          pyenv local 2.7.12
          echo $HOME/.pyenv/shims >> $GITHUB_PATH
      - name: Install virtualenv
        run: |
          which python
          python -m pip install --upgrade pip
          which pip
          pip install virtualenv
          which virtualenv
          virtualenv venv --python $(pyenv which python)
      - name: Setup dependencies
        run: |
          source venv/bin/activate
          which pip
          pip install -r requirements.txt -r requirements_dev.txt
      - name: Build
        run: |
          source venv/bin/activate
          which python
          python build.py
#      - name: Lint with flake8
#        run: |
#          source Virtualenv/bin/activate
#          export SRC=Contents/Code
#          flake8 $SRC --count --select=E9,F63,F7,F82 --show-source --statistics
#          flake8 $SRC --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#      - name: Test with pytest
#        run: |
#          source Virtualenv/bin/activate
#          export PYTHONPATH=Contents/Code
#          pytest --cov-config=.coveragerc --cov-report=xml --cov=$PYTHONPATH $PYTHONPATH/test
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: coverage.xml
#          flags: unittests
#          name: codecov-umbrella
#          fail_ci_if_error: true
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: output/*.tar.gz

  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache pyenv
        id: cache-pyenv
        uses: actions/cache@v2
        with:
          path: /Users/runner/.pyenv/
          key: ${{ runner.os }}-pyenv
      - name: Install Python 2.7.17
        run: |
          brew install pyenv
          pyenv install 2.7.17
          pyenv local 2.7.17
          echo $HOME/.pyenv/shims >> $GITHUB_PATH
      - name: Install virtualenv
        run: |
          which python
          python -m pip install --upgrade pip
          which pip
          pip install virtualenv
          which virtualenv
          virtualenv venv --python $(pyenv which python)
      - name: Setup dependencies
        run: |
          source venv/bin/activate
          which pip
          pip install -r requirements.txt -r requirements_dev.txt
      - name: Build
        run: |
          source venv/bin/activate
          which python
          python build.py
#      - name: Lint with flake8
#        run: |
#          source Virtualenv/bin/activate
#          export SRC=Contents/Code
#          flake8 $SRC --count --select=E9,F63,F7,F82 --show-source --statistics
#          flake8 $SRC --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#      - name: Test with pytest
#        run: |
#          source Virtualenv/bin/activate
#          export PYTHONPATH=Contents/Code
#          pytest --cov-config=.coveragerc --cov-report=xml --cov=$PYTHONPATH $PYTHONPATH/test
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: coverage.xml
#          flags: unittests
#          name: codecov-umbrella
#          fail_ci_if_error: true
      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: output/*.tar.gz
